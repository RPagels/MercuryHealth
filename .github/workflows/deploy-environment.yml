name: Deployment Environment

#
on:
  workflow_call:
    inputs:
      resource-group-base-name:
        description: 'Resource Group base name'
        default: 'rg-mercuryhealth-dev'
        required: true
        type: string
      environment-suffix:
        description: 'The suffix to be used for the current environment'
        default: 'dev'
        required: true
        type: string
      resource-group-location:
        description: 'Azure region for the deployed resources'
        default: 'eastus'
        required: false
        type: string
    secrets:
      azure-credentials:
        description: 'Credentials used to log into Azure for deployment of resources'
        required: true
      sql-db-server-name:
        description: 'Credentials used to log into SQL for deployment of resources'
        required: true
      sql-db-login:
        description: 'Credentials used to log into SQL for deployment of resources'
        required: true
      sql-db-password:
        description: 'Credentials used to log into SQL for deployment of resources'
        required: true
      sql-connection-string:
        description: 'Credentials used to log into SQL for deployment of resources'
        required: true

jobs:
  ###################################################################
  # Deployment Stage - Infrastructure / Application / Database      #
  ###################################################################
  deploy_to_environment:
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.Infra.outputs.out_webSiteNameURL }}
      output2: 'https://${{ steps.Infra.outputs.out_webSiteNameURL }}'
      output3: 'https://${{ steps.Infra.outputs.out_loadTestsName }}'
      
    name: Deploy Application
    env:
      Azure_Resource_GroupName: ${{ inputs.resource-group-base-name }}-${{ inputs.environment-suffix }}
      webAppUrl: 'TBD'

    permissions:
      contents: read
      packages: write

    # Identify any jobs that must complete successfully before this job will run.
    steps:
    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.azure-credentials }}

    - name: Ensure Resource Group Exists
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          #!/bin/bash
          az group create --name ${{ env.Azure_Resource_GroupName }} --location ${{ inputs.resource-group-location }}

    - name: Ensure Resource Group is UnLocked
      if: contains(github.event_name, 'push')
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az group lock delete --name DontDeleteMe --resource-group ${{ env.Azure_Resource_GroupName }}

    - name: Download Build Artifact-Infrastructure
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: MercuryHealth.IaC
        path: ${{ github.workspace }}/MercuryHealth.IaC

#      ###########################################
#      # Validate ARM Template using Bicep DSL
#      ###########################################
#    - name: Validate Azure Bicep
#      uses: azure/arm-deploy@v1
#      continue-on-error: false
#      with:
#        resourceGroupName: ${{ env.Azure_Resource_GroupName }}
#        template: ./MercuryHealth.IaC/main-1.bicep
#        parameters: ./MercuryHealth.IaC/main-1.params.json sqlAdministratorLogin=${{ secrets.sql-db-login }} sqlAdministratorLoginPassword=${{ secrets.sql-db-password }}
#        deploymentMode: Validate
        
      ###########################################
      # Deploy ARM Template using Bicep DSL
      ###########################################
    - name: Infrastructure
      id: Infra
      uses: azure/arm-deploy@v1
      continue-on-error: false
      with:
        resourceGroupName: ${{ env.Azure_Resource_GroupName }}
        template: ./MercuryHealth.IaC/main-1.bicep
        parameters: ./MercuryHealth.IaC/main-1.params.json sqlAdministratorLogin=${{ secrets.sql-db-login }} sqlAdministratorLoginPassword=${{ secrets.sql-db-password }}
        deploymentMode: Incremental
        failOnStdErr: false

#    - name: Test Outputs across jobs
#      run: echo "::set-output name=out_webSiteNameURL::${{steps.Infra.outputs.out_webSiteNameURL}}"
      
    - name: Save Application Insights Id to Environment Variable
      run: |
         echo 'sqlserverFQName = ${{steps.Infra.outputs.out_sqlserverFQName}}'
         echo 'webSiteName = ${{steps.Infra.outputs.out_webSiteName}}'
         echo 'out_webSiteNameURL = ${{steps.Infra.outputs.out_webSiteNameURL}}'
#        echo 'functionAppName = ${{steps.Infra.outputs.out_functionAppName}}'
#        echo 'sqlserverName = ${{steps.Infra.outputs.out_sqlserverName}}'
#        echo 'sqlDBName = ${{steps.Infra.outputs.out_sqlDBName}}'
#        echo 'sqlConnectionString = ${{steps.Infra.outputs.out_sqlConnectionString}}
#        echo 'configStoreName = ${{steps.Infra.outputs.out_configStoreName}}'
#        echo 'appInsightsName = ${{steps.Infra.outputs.out_appInsightsName}}'
#        echo 'apiServiceName = ${{steps.Infra.outputs.out_apiServiceName}}'
#        echo 'loadTestsName = ${{steps.Infra.outputs.out_loadTestsName}}'
#        echo 'keyvaultName = ${{steps.Infra.outputs.out_keyvaultName}}'
#        echo 'appInsightsApplicationId = ${{steps.Infra.outputs.out_appInsightsApplicationId}}'
#        echo ''
#        echo "::set-output name=appInsightsAppId2::${{steps.Infra.outputs.out_appInsightsApplicationId}}"
#        echo "appInsightsAppId3= ${{ steps.Infra.outputs.out_appInsightsApplicationId }}" >> $GITHUB_ENV

    - name: Download Build Artifact-Database
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: MercuryHealth.Database
        path: ${{ github.workspace }}/MercuryHealth.Database
        
    # Deploy Database *.dacpac file - NOT TRUE!!! Requires windows-latest runner!!!
    - name: 'Deploy the database to Azure'
      uses: Azure/sql-action@v1.2
      with:
        server-name: ${{ steps.Infra.outputs.out_sqlserverFQName }}
        connection-string: ${{â€¯secrets.sql-connection-string }}
        dacpac-package: './MercuryHealth.Database/MercuryHealth.Database.dacpac'

    - name: Download Build Artifacts-Website Application
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: MercuryHealth.Website
        path: ${{ github.workspace }}/MercuryHealth.Website

    - name: 'Deploy Website Application'
      uses: azure/webapps-deploy@v2
      with:
          app-name: ${{ steps.Infra.outputs.out_webSiteName }}
          #slot-name: 'Dev'
          package: './MercuryHealth.Website'
          
    - name: Download Build Artifacts-Function Application
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: MercuryHealth.FunctionApp
        path: ${{ github.workspace }}/MercuryHealth.FunctionApp

    # Deploy Function Application
    - name: 'Deploy Function Application'
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ steps.Infra.outputs.out_functionAppName }}
        slot-name: 'production'
        package: './MercuryHealth.FunctionApp'

# --api-key ${{ steps.Infra.outputs.releaseAnnotationId }}
    - name: Generate Temporary API Key For App Insights
      id: AIKeyGen
      uses: Azure/CLI@v1
      with:
        inlineScript: |
          az config set extension.use_dynamic_install=yes_without_prompt
          result=$(az monitor app-insights api-key create \
                      --api-key ${{ steps.Infra.outputs.out_releaseAnnotationGuidID }} \
                      --write-properties WriteAnnotations \
                      -g ${{ env.Azure_Resource_GroupName }} \
                      --app ${{ steps.Infra.outputs.out_appInsightsApplicationId }} \
                      --query "apiKey" --output tsv)
          echo "::set-output name=aiKey::$result"
    
    - name: Consume AI Key For App Insights
      run: |
        echo 'out_releaseAnnotationGuidID=${{ steps.Infra.outputs.out_releaseAnnotationGuidID }}'
        echo 'out_appInsightsApplicationId=${{ steps.Infra.outputs.out_appInsightsApplicationId }}'
        echo 'out_appInsightsAPIApplicationId=${{ steps.Infra.outputs.out_appInsightsAPIApplicationId }}'
        echo 'steps.AIKeyGen.outputs.aiKey=${{ steps.AIKeyGen.outputs.aiKey }}'
        
    - name: Annotate deployment
      uses: wictorwilen/application-insights-action@v1
      id: annotation
      with:
        applicationId: ${{ steps.Infra.outputs.out_appInsightsAPIApplicationId }}
        apiKey: ${{ steps.AIKeyGen.outputs.aiKey }}
        releaseName: ${{ github.event_name }}
        message: ${{ github.event.head_commit.message }}
        actor: ${{ github.actor }}

# --api-key ${{ steps.Infra.outputs.releaseAnnotationId }}
    - name: Remove Temporary API Key For App Insights
      uses: Azure/CLI@v1
      with:
        inlineScript: |
          az config set extension.use_dynamic_install=yes_without_prompt
          az monitor app-insights api-key delete \
                      --api-key ${{ steps.Infra.outputs.out_releaseAnnotationGuidID }} \
                      -g ${{ env.Azure_Resource_GroupName }} \
                      --app ${{ steps.Infra.outputs.out_appInsightsApplicationId }} 

    - name: Ensure Resource Group is Locked
      if: contains(github.event_name, 'push')
      uses: Azure/CLI@v1
      continue-on-error: true
      with:
        inlineScript: |
          az group lock create --lock-type CanNotDelete --name DontDeleteMe --resource-group ${{ env.Azure_Resource_GroupName }} --notes 'Prevent deletion of the resource group'

###################################################################
# CD Stage - UI Testing                         
###################################################################
  UITesting_Stage_Application:
    if: contains(github.event_name, 'push')

    name: Playwright UI Tests
    
    env:
      dotnet_version: '6.x.x'
  
    # The type of runner that the job will run on - windows-latest
    runs-on: ubuntu-latest

    # Identify any jobs that must complete successfully before this job will run.
    needs: [deploy_to_environment]
    timeout-minutes: 10
        
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.dotnet_version }}
          
      # Download Artifacts under $GITHUB_WORKSPACE, so your job can access it
      - name: Download Build Artifacts-Playwright Tests
        continue-on-error: false
        uses: actions/download-artifact@v2
        with:
          name: MercuryHealth.UITests
          path: ${{ github.workspace }}/MercuryHealth.UITests

      - name: Test Outputs across jobs
        run: |
           echo 'output1 = ${{needs.deploy_to_environment.outputs.output1}}'
           echo 'output2 = ${{needs.deploy_to_environment.outputs.output2}}'
      
      # Update Runsettings with Website URL
      - name: Update Runsettings with Website URL
        uses: Azure/powershell@v1
        continue-on-error: false
        id: setWebsiteUrl
        env:
          POWERSHELL_TELEMETRY_OPTOUT: 1
        with:
          inlineScript: MercuryHealth.UITests/TransformRunSettings.ps1 -website_url 'https://${{needs.deploy_to_environment.outputs.output1}}'
          # Azureâ€¯PSâ€¯versionâ€¯toâ€¯beâ€¯usedâ€¯toâ€¯executeâ€¯theâ€¯script, example: 1.8.0, 2.8.0, 3.4.0.â€¯To use the latestâ€¯version, specify "latest".
          azPSVersion: latest
          # Selectâ€¯theâ€¯valueâ€¯ofâ€¯theâ€¯ErrorActionPreferenceâ€¯variableâ€¯forâ€¯executingâ€¯theâ€¯script.â€¯Options:â€¯stop,â€¯continue,â€¯silentlyContinue.â€¯Defaultâ€¯isâ€¯Stop.
          errorActionPreference: continue

      - name: Playwright Tests with DLL
        continue-on-error: false
        run: |
         dotnet build MercuryHealth.UITests/MercuryHealth.UITests.csproj --configuration ${{ env.buildConfiguration }}
         dotnet publish MercuryHealth.UITests/MercuryHealth.UITests.csproj --configuration ${{ env.buildConfiguration }} -o './MercuryHealth.UITests'
         dotnet test MercuryHealth.UITests/MercuryHealth.UITests.dll --filter TestCategory=Playwright_Tests_Chromium --verbosity minimal -l "console;verbosity=normal" --settings MercuryHealth.UITests/MercuryHealthTests.runsettings


      - name: Playwright Tests on Chromium
        continue-on-error: false
        run: dotnet test MercuryHealth.UITests/MercuryHealth.UITests.dll --filter TestCategory=Playwright_Tests_Chromium -l "console;verbosity=normal"  --settings MercuryHealth.UITests/MercuryHealthTests.runsettings

      - name: Playwright Tests on Firefox
        continue-on-error: false
        run: dotnet test MercuryHealth.UITests/MercuryHealth.UITests.dll --filter TestCategory=Playwright_Tests_FireFox -l "console;verbosity=normal" --settings MercuryHealth.UITests/MercuryHealthTests.runsettings

##################################################################
# CD Stage - Load and Performance Testing                         #
###################################################################
  LoadTesting_Stage_Application:
    if: contains(github.event_name, 'push')

    name: Load Test
    
    env:
      load_Test_Resource: 'loadtests-xibwnqufj5jam'
      #Azure_Resource_GroupName: 
      #load_Test_Resource2: '${{ steps.Infra.outputs.out_loadTestsName }}'

    # Identify any jobs that must complete successfully before this job will run.
    runs-on: ubuntu-latest

    # Identify any jobs that must complete successfully before this job will run.
    needs: [deploy_to_environment]
    steps:
      - name: Checkout GitHub Actions 
        uses: actions/checkout@v2

      # Download Artifacts under $GITHUB_WORKSPACE, so your job can access it
      - name: Download Build Artifacts-Load Tests
        uses: actions/download-artifact@v2
        with:
          name: MercuryHealth.LoadTests
          path: ${{ github.workspace }}/MercuryHealth.LoadTests
          
      - name: Login to Azure
        uses: azure/login@v1
        continue-on-error: false
        with:
          creds: ${{ secrets.azure-credentials }}

      - name: Set Environment Variable
        run: |
          echo '::set-output name=webAppUrl::${{ steps.Infra.outputs.out_webSiteName }}'
          echo 'webAppUrl= ${{ steps.Infra.outputs.out_webSiteName }}' >> $GITHUB_ENV
          echo 'Load_Test_Resource=${{ env.Load_Test_Resource }}'
          echo 'Azure_Resource_GroupName=${{ env.Azure_Resource_GroupName }}'

      # Use environment variables in Apache JMeter Load Tests - webAppUrl
      # JMX file uses  ${System.getenv("webAppUrl")}

      - name: Test Outputs across jobs
        run: |
           echo 'output1 = ${{needs.deploy_to_environment.outputs.output1}}'
           echo 'output2 = ${{needs.deploy_to_environment.outputs.output2}}'
           echo 'output3 = ${{needs.deploy_to_environment.outputs.output3}}'
           
      # Update JX with Website URL
      - name: Update JMX
        uses: Azure/powershell@v1
        continue-on-error: false
        id: setWebsiteUrl
        env:
          POWERSHELL_TELEMETRY_OPTOUT: 1
        with:
          inlineScript: MercuryHealth.LoadTests/TransformJMXFile.ps1 -website_url ${{needs.deploy_to_environment.outputs.output1}}
          # Azureâ€¯PSâ€¯versionâ€¯toâ€¯beâ€¯usedâ€¯toâ€¯executeâ€¯theâ€¯script, example: 1.8.0, 2.8.0, 3.4.0.â€¯To use the latestâ€¯version, specify "latest".
          azPSVersion: latest
          # Selectâ€¯theâ€¯valueâ€¯ofâ€¯theâ€¯ErrorActionPreferenceâ€¯variableâ€¯forâ€¯executingâ€¯theâ€¯script.â€¯Options:â€¯stop,â€¯continue,â€¯silentlyContinue.â€¯Defaultâ€¯isâ€¯Stop.
          errorActionPreference: continue
          
# loadTestResource: ${{ env.Load_Test_Resource }}
# loadTestResource: ${{ steps.Infra.outputs.out_loadTestsName }}
# ${{ env.Load_Test_Resource }}

      - name: 'Azure Load Testing'
        uses: azure/load-testing@v1
        continue-on-error: false
        with:
          loadTestConfigFile: './MercuryHealth.LoadTests/LoadTest_HomePage_Config.yaml'
          loadTestResource: ${{needs.deploy_to_environment.outputs.output1}}
          resourceGroup: ${{ env.Azure_Resource_GroupName }}

      - name: Azure logout
        run: |
          az logout
          
###################################################################
# CD Stage - Dev                        #
###################################################################
  Dev_Stage_Application:
    if: contains(github.event_name, 'push')

    name: Approval
    
    # Identify any jobs that must complete successfully before this job will run.
    runs-on: ubuntu-latest

    # Identify any jobs that must complete successfully before this job will run.
    needs: [UITesting_Stage_Application]
    environment: Dev
    steps:
      - name: Approve Deployment
        run: |
          echo 'Wait for Approval'
