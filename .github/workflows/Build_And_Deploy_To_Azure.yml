# This is a basic workflow to help you get started with Actions

name: Build_And_Deploy_To_Azure

# Environment Variables
env:
  # Path to the solution file relative to the root of the project.
  buildConfiguration: Release
  buildPlatform: Any CPU
  dotnet_version: '6.x.x'
  AZURE_WEBAPP_PACKAGE_PATH: '.'
#  ARM_FILE_PATH: 'MercuryHealthGroup.IaC'
#  ARM_FILE_NAME: 'main-1'
  Azure_Resource_Group: 'MercuryHealth-rg'
#  ARTIFACT_STAGING_PATH: '.'
#  ARTIFACT_STAGING_FOLDER: 'bin/Website'
#  SOLUTION_FILE_PATH: 'MercuryHealthGroup'
#  SOLUTION: 'MercuryHealthGroup/MercuryHealthGroup.sln'
#  UNIT_TESTS_STAGING_PATH: 'MercuryHealthGroup/MercuryHealthGroup.UnitTests/bin'
#  UI_TESTS_STAGING_PATH: MercuryHealthGroup/MercuryHealthGroup.UITests/bin'
  Website_Name: webSite-4vwxkvpofrtbq
  Function_AppName: functionApp-4vwxkvpofrtbq
  Hosting_Plan_Name: appPlan-4vwxkvpofrtbq
#  Deployment_Name: MercuryHealthGroup.${{ github.workflow }}.${{ github.run_number }}

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
# This workflow contains a multiple jobs: "CI", "Dev", "QA", "Prod"
###################################################################
# CI Stage                                                        #
###################################################################
jobs:
  Build_Stage_Application:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.dotnet_version }}

      # Run dotnet build and publish
      - name: dotnet build unit test and publish
        run: |
          dotnet restore
          dotnet build MercuryHealth.Web/MercuryHealth.Web.csproj --configuration ${{ env.buildConfiguration }} --no-restore
          dotnet publish MercuryHealth.Web/MercuryHealth.Web.csproj --configuration ${{ env.buildConfiguration }} -o './website'
          dotnet build MercuryHealth.UITests/MercuryHealth.UITests.csproj --configuration ${{ env.buildConfiguration }} --no-restore
          dotnet publish MercuryHealth.UITests/MercuryHealth.UITests.csproj --configuration ${{ env.buildConfiguration }} -o './uitests'
          dotnet build MercuryHealth.FunctionApp/MercuryHealth.FunctionApp.csproj --configuration ${{ env.buildConfiguration }} --no-restore
          dotnet publish MercuryHealth.FunctionApp/MercuryHealth.FunctionApp.csproj --configuration ${{ env.buildConfiguration }} -o './functionapp'
          dotnet build MercuryHealth.API/MercuryHealth.API.csproj --configuration ${{ env.buildConfiguration }} --no-restore
          dotnet publish MercuryHealth.API/MercuryHealth.API.csproj --configuration ${{ env.buildConfiguration }} -o './api'
#          dotnet build MercuryHealth.UITests/MercuryHealth.UITests.csproj --configuration ${{ env.buildConfiguration }} --no-restore
#          dotnet publish MercuryHealth.UITests/MercuryHealth.UITests.csproj --configuration ${{ env.buildConfiguration }} -o './uitests'

      - name: dotnet retore database
        run: dotnet restore MercuryHealth.Database/MercuryHealth.Database.csproj
      - name: dotnet build database
        run: dotnet build MercuryHealth.Database/MercuryHealth.Database.csproj --configuration ${{ env.buildConfiguration }} --no-restore --output './database'

      - name: dotnet run unit tests
        run: dotnet test MercuryHealth.UnitTests/MercuryHealth.UnitTests.csproj

      ###########################################
      # Upload Artifacts
      ###########################################
      - name: Upload Build Artifacts-Website
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v2
        with:
          name: MercuryHealth.Website
          path: ${{ github.workspace }}/website

      - name: Upload Build Artifacts-FunctionApp
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v2
        with:
          name: MercuryHealth.FunctionApp
          path: ${{ github.workspace }}/functionapp

      - name: Upload Build Artifacts-Database
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v2
        with:
          name: MercuryHealth.Database
          path: ${{ github.workspace }}/database

      - name: Upload Build Artifacts-API
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v2
        with:
          name: MercuryHealth.API
          path: ${{ github.workspace }}/api

      - name: Upload Build Artifacts-UI Tests
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v2
        with:
          name: MercuryHealth.UITests
          path: ${{ github.workspace }}/uitests

      - name: Upload Infrastucture Files
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v2
        with:
          name: MercuryHealth.IaC
          path: ${{ github.workspace }}/MercuryHealth.IaC/*

      - name: "Azure login"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Validate ARM Template
      - name: Validate Azure Bicep
        uses: Azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ env.Azure_Resource_Group }}
          subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          template: ${{ github.workspace }}/MercuryHealth.IaC/main-1.bicep
          parameters: ${{ github.workspace }}/MercuryHealth.IaC/main-1.params.json sqlAdministratorLogin=${{ secrets.SQL_DB_LOGIN }} sqlAdministratorLoginPassword=${{ secrets.SQL_DB_PASSWORD }}
          deploymentMode: Validate

      - name: Azure logout
        run: |
          az logout

###################################################################
# CD Stage - Infrastructure                                       #
###################################################################
  Deploy_Stage_IaC:
#    if: contains(github.event_name, 'push')

    name: Deploy Infrastructure
    runs-on: ubuntu-latest

    needs: [Build_Stage_Application]
    steps:
    - name: Download Build Artifact-Infrastructure
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: MercuryHealth.IaC
        path: ${{ github.workspace }}/MercuryHealth.IaC
        
    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
      
# Deploy ARM Template
    - name: Deploy Infrastucture
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
        resourceGroupName: ${{ env.Azure_Resource_Group }}
        template: ./MercuryHealth.IaC/main-1.bicep
        parameters: ./MercuryHealth.IaC/main-1.params.json sqlAdministratorLogin=${{ secrets.SQL_DB_LOGIN }} sqlAdministratorLoginPassword=${{ secrets.SQL_DB_PASSWORD }}
        deploymentMode: Incremental
        failOnStdErr: false

    - name: Azure logout
      run: |
        az logout
        
###################################################################
# CD Stage - Database                                             #
###################################################################
  Deploy_Stage_Database:
    if: contains(github.event_name, 'push')

    name: Deploy Database
    runs-on: windows-latest

    needs: [Deploy_Stage_IaC]
    steps:

    - name: Download Build Artifact-Database
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: MercuryHealth.Database
        path: ${{ github.workspace }}/MercuryHealth.Database

    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.AZURE_SQL_CREDENTIALS }}
    
    # Deploy Database *.dacpac file - Requires windows-latest runner!!!
    - name: 'Deploy the database to Azure'
      uses: Azure/sql-action@v1.2
      with:
        server-name: ${{ secrets.SQL_DB_Server_Name }}
        
        connection-string: ${{â€¯secrets.SQL_DB_Connection_String }}
        dacpac-package: './MercuryHealth.Database/MercuryHealth.Database.dacpac'

    - name: Azure logout
      run: |
        az logout

###################################################################
# CD Stage - Application                                             #
###################################################################
  Deploy_Stage_Application:
#  Dev:
    if: contains(github.event_name, 'push')

    name: Deploy Application
    runs-on: ubuntu-latest

    needs: [Deploy_Stage_IaC]
    steps:

    - name: Download Build Artifacts-Function Application
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: MercuryHealth.FunctionApp
        path: ${{ github.workspace }}/MercuryHealth.FunctionApp

    - name: Download Build Artifacts-Website Applicationn
      uses: actions/download-artifact@v2
      continue-on-error: false
      with:
        name: MercuryHealth.Website
        path: ${{ github.workspace }}/MercuryHealth.Website
        
    - name: Login to Azure
      uses: azure/login@v1
      continue-on-error: false
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Deploy Application
    - name: 'Deploy Website Application'
      uses: azure/webapps-deploy@v2
      with:
          app-name: ${{ env.Website_Name }}
          slot-name: 'Dev'
          package: './MercuryHealth.Website'
          
    # Deploy Function Application
    - name: 'Deploy Function Application'
      uses: Azure/functions-action@v1
      with:
        app-name: ${{ env.Function_AppName }}
        slot-name: 'production'
        package: './MercuryHealth.FunctionApp'
#        publish-profile: ${{ secrets.functionApp_4vwxkvpofrtbq_f993 }}
        
    # Deploy APIs
    - name: 'Deploy APIs'
      run: echo 'Deploy APIs'
#      uses: azure/webapps-deploy@v2
#      with:
#          app-name: ${{ env.Website_Name }}
#          slot-name: 'Dev'
#          package: './MercuryHealth.API'

    - name: Annotate deployment
      uses: wictorwilen/application-insights-action@v1
      continue-on-error: true
      id: annotation
      with:
        applicationId: ${{ secrets.AppInsightsApplicationID }}
        apiKey: ${{secrets.AppInsightsDeployAnnotationAPIKey}}
        releaseName: ${{ github.event_name }}
        message: ${{ github.event.head_commit.message }}
        actor: ${{ github.actor }}
        continue-on-error: true
    
    - name: Azure logout
      run: |
        az logout

###################################################################
# CD Stage - UI Testing                         
###################################################################
  UITesting_Stage_Application:
    if: contains(github.event_name, 'push')

    name: UI Test Application
    runs-on: ubuntu-latest

    needs: [Deploy_Stage_Application, Deploy_Stage_Database]
    timeout-minutes: 60
        
    steps:
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.dotnet_version }}

#      - uses: microsoft/playwright-github-action@v1
#      - name: Install dependencies and run tests
#       run: npm install && npm test

#      - uses: actions/upload-artifact@v2
#        if: ${{ always() }}
#        with:
#          name: test-artifacts
#          path: path/to/artifacts
    
#      - name: Install Playwright CLI
#        run: dotnet custom install Microsoft.Playwright.CLI
#        continue-on-error: false
        
#      - name: Update Playwright Browsers
#        run: npx playwright install
#        shell: bash
#        continue-on-error: false

      - name: Download Build Artifacts-Playwright Tests
        uses: actions/download-artifact@v2
        continue-on-error: false
        with:
          name: MercuryHealth.UITests
          path: ${{ github.workspace }}/MercuryHealth.UITests

      - name: Setup Playwright
        run: |
          dotnet tool install -g Microsoft.Playwright.CLI
          npx playwright install-deps chromium

      # note this step is needed because the latest chromium is not being installed with the above commands
#      - name: Ensure latest Chromium
#        run: |
#          npm i -D playwright

      - uses: microsoft/playwright-github-action@v1
      - name: Run Playwright Tests
        continue-on-error: true
        run: dotnet test MercuryHealth.UITests/MercuryHealth.UITests.dll
        
      - name: Run Playwright Tests
        continue-on-error: false
        run: dotnet test MercuryHealth.UITests/MercuryHealth.UITests.dll
        
###################################################################
# CD Stage - Load and Performance Testing                         #
###################################################################
  LoadTesting_Stage_Application:
    if: contains(github.event_name, 'push')

    name: Load Test Application
    runs-on: ubuntu-latest

    needs: [UITesting_Stage_Application]
    steps:
      - name: Checkout GitHub Actions 
        uses: actions/checkout@v2
          
      - name: Login to Azure
        uses: azure/login@v1
        continue-on-error: false
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        
      - name: 'Azure Load Testing'
        run: echo 'Azure Load Testing'
      
#      - name: 'Azure Load Testing'
#        uses: azure/load-testing@main
#        with:
#          loadTestConfigFile: 'SampleApp.yaml'
#          loadTestResource: ${{ env.LOAD_TEST_RESOURCE }}
#          resourceGroup: ${{ env.LOAD_TEST_RESOURCE_GROUP }}

      - name: Azure logout
        run: |
          az logout
        
###################################################################
# CD Stage - Production                        #
###################################################################
  Production_Stage_Application:
    if: contains(github.event_name, 'push')

    name: Deploy to Production
    runs-on: ubuntu-latest

    needs: [LoadTesting_Stage_Application]
    environment: Production
    steps:
      - name: Checkout GitHub Actions 
        uses: actions/checkout@v2
          
      - name: Login to Azure
        uses: azure/login@v1
        continue-on-error: false
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
        
      - name: 'Deploy to Production'
        run: echo 'Deploy to Production'
      - name: 'Swap slots'
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az webapp deployment slot swap \
              -g ${{ env.Azure_Resource_Group }} \
              -n ${{ env.Website_Name }} \
              --slot dev \
              --target-slot production      
              
      - name: Process errors
        if: ${{ failure() }}
        run: |
            curl --request POST \
              --url https://api.github.com/repos/${{ github.repository }}/issues \
              --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
              --header 'content-type: application/json' \
              --data '{
                "title": "${{ env.script-name }} has failed: ${{ github.run_id }}",
                "body": "${{ env.script-name }} has failed: **${{ github.workflow }}**. \n\n Failure in run: _${{ github.run_id }}_."
                }'
